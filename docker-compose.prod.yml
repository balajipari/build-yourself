version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: build_yourself_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/conf.d/default.prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - build_yourself_network_prod

  postgres:
    image: postgres:15-alpine
    container_name: build_yourself_db_prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - build_yourself_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: build_yourself_redis_prod
    restart: always
    volumes:
      - redis_data_prod:/data
    networks:
      - build_yourself_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: build_yourself_api_prod
    restart: always
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379
    volumes:
      - backend_logs_prod:/app/logs
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - build_yourself_network_prod

volumes:
  postgres_data_prod:
  redis_data_prod:
  backend_logs_prod:

networks:
  build_yourself_network_prod:
    driver: bridge
